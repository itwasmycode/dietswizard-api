name: Scala Docker Build and Push

on:
  push:
    branches:
      - main


jobs:
  docker:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project:
          - scala-auth-api

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd ${{ matrix.project }}
        docker build -t $ECR_REGISTRY/${{ matrix.project }}:${{ github.sha }} .
        docker push $ECR_REGISTRY/${{ matrix.project }}:${{ github.sha }}

    - name: Move to terraform  directory
      run: cd terraform

    - name: Download Terraform
      run: |
        curl -LO "https://releases.hashicorp.com/terraform/1.0.9/terraform_1.0.9_linux_amd64.zip"

    - name: Unzip Terraform
      run: |
        mkdir terraform_temp
        unzip terraform_1.0.9_linux_amd64.zip -d terraform_temp
        chmod +x terraform_temp/terraform
        sudo mv terraform_temp/terraform /usr/local/bin/

    - name: Clean up
      run: |
        rm -rf terraform_temp



    - name: Checkout code
      uses: actions/checkout@v2
    - name : Change directory
      run : cd terraform
    - name : List files
      run : ls -la
    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Check if IAM role exists
      id: check-role
      run: |
        ROLE_ARN=$(aws iam get-role --role-name "lambda-apisubnetgroup" --query 'Role.Arn' --output text)
        if [ "$ROLE_ARN" != "None" ] && [ -n "$ROLE_ARN" ]; then
          echo "ROLE_ARN=${ROLE_ARN}" >> $GITHUB_ENV
          echo "IAM role found: ${ROLE_ARN}"
        else
          echo "ROLE_ARN=None" >> $GITHUB_ENV
          echo "IAM role not found."
        fi

    - name: Import IAM role if exists
      working-directory: terraform
      run: |
        echo "${ROLE_ARN}"
        if [ "$ROLE_ARN" != "None" ]; then
          terraform import aws_iam_role.lambda_role lambda-apisubnetgroup
        fi    

    - name: Import VPC if exists
      working-directory: terraform
      run: |
        VPC_ID="vpc-0526d4237f50ee1ec"
        if [ ! -z "$VPC_ID" ]; then
          terraform import aws_vpc.my_vpc $VPC_ID
        fi

    - name: Import DB Subnet if Exists
      working-directory: terraform
      run : |
        SUBNET_GROUP_NAME=$(aws rds describe-db-subnet-groups --query "DBSubnetGroups[?DBSubnetGroupName=='postgres-subnet-group'].DBSubnetGroupName" --output text)
        if [ "$SUBNET_GROUP_NAME" == "postgres-subnet-group" ]; then
        terraform import aws_db_subnet_group.example postgres-subnet-group
        fi
    - name: Import Subnets if they exist
      working-directory: terraform
      run: |
        SUBNET_ID_1=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=${VPC_ID}" "Name=cidr,Values=10.0.0.0/25" --query 'Subnets[0].SubnetId' --output text)
        SUBNET_ID_2=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=${VPC_ID}" "Name=cidr,Values=10.0.0.128/25" --query 'Subnets[0].SubnetId' --output text)
    
        if [ "$SUBNET_ID_1" != "None" ] && [ "$SUBNET_ID_1" != "null" ]; then
        terraform import aws_subnet.my_subnet_1 $SUBNET_ID_1
        fi
    
        if [ "$SUBNET_ID_2" != "None" ] && [ "$SUBNET_ID_2" != "null" ]; then
        terraform import aws_subnet.my_subnet_2 $SUBNET_ID_2
        fi

    - name: Check if Security Group exists
      id: check-sg
      run: |
        SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=lambda-sg" --query 'SecurityGroups[0].GroupId' --output text)
        echo "SG_ID=${SG_ID}" >> $GITHUB_ENV
        if [ "$SG_ID" != "None" ]; then
          echo "Security Group found: ${SG_ID}"
        else
          echo "Security Group not found."
        fi
    - name: Check if RDS Security Group exists
      id: check-rds-sg
      run: |
        RDS_SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=rds-sg-lambda" --query 'SecurityGroups[0].GroupId' --output text)
        if [ -n "$RDS_SG_ID" ]; then
          echo "RDS_SG_ID=${RDS_SG_ID}" >> $GITHUB_ENV
          echo "RDS Security Group found: ${RDS_SG_ID}"
        else
          echo "RDS_SG_ID=None" >> $GITHUB_ENV
          echo "RDS Security Group not found."
        fi

    - name: Import RDS Security Group if exists
      working-directory: terraform
      run: |
        if [ "$RDS_SG_ID" != "None" ]; then
          terraform import aws_security_group.rds_sg "$RDS_SG_ID"
        fi

    - name: Import Security Group if exists
      working-directory: terraform
      if: env.SG_ID != 'None'
      run: terraform import aws_security_group.lambda_sg ${{ env.SG_ID }}

    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve -var-file=variables.tfvars