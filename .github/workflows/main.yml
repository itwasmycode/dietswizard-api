name: Scala Docker Build and Push

on:
  push:
    branches:
      - main


jobs:
  docker:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project:
          - scala-auth-api

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd ${{ matrix.project }}
        docker build -t $ECR_REGISTRY/${{ matrix.project }}:${{ github.sha }} .
        docker push $ECR_REGISTRY/${{ matrix.project }}:${{ github.sha }}

    - name: Move to terraform  directory
      run: cd terraform

    - name: Download Terraform
      run: |
        curl -LO "https://releases.hashicorp.com/terraform/1.0.9/terraform_1.0.9_linux_amd64.zip"

    - name: Unzip Terraform
      run: |
        mkdir terraform_temp
        unzip terraform_1.0.9_linux_amd64.zip -d terraform_temp
        chmod +x terraform_temp/terraform
        sudo mv terraform_temp/terraform /usr/local/bin/

    - name: Clean up
      run: |
        rm -rf terraform_temp



    - name: Checkout code
      uses: actions/checkout@v2
    - name : Change directory
      run : cd terraform
    - name : List files
      run : ls -la
    - name: Terraform Init
      working-directory: terraform
      run: terraform init
    - name: Import IAM role if exists
      working-directory: terraform
      run: |  
        if [ "$ROLE_ARN" != "None" ]; then
          terraform import aws_iam_role.lambda_role lambda-apisubnetgroup
        fi
    - name: Import VPC if exists
      working-directory: terraform
      run: |
        VPC_ID="vpc-099bcb490334e7b0a"
        if [ ! -z "$VPC_ID" ]; then
          terraform import aws_vpc.my_vpc $VPC_ID
        fi
    - name: Check if DB Subnet Exists
      working-directory: terraform
      run : |
        SUBNET_GROUP_NAME=$(aws rds describe-db-subnet-groups --query "DBSubnetGroups[?DBSubnetGroupName=='postgres-subnet-group'].DBSubnetGroupName" --output text)
        if [ "$SUBNET_GROUP_NAME" == "postgres-subnet-group" ]; then
          terraform import aws_db_subnet_group.my_db_subnet_group postgres-subnet-group
        fi
    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve -var-file=variables.tfvars